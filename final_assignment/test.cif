
/* @HIRAM (05_12_2019): This is only a baseline and several changes are necessary, such as, verifying every single requirement and
 making sure consistent wording is kept. Feel free to modify or rename words/variables/edges/states as you see fit.

  @Sukrut(05_12_2019): Added the requirement numbers from the original text (Page 3) to keep track of the requirements,
  I have also divided the requirements based on intention as mentioned in the text. I have kept all the informal statements written by @Hiram,
  they relate to requirement statements in the same order. A PDF of the original text is shared where I have marked already implemented requirements.
  Please refer and update both the files! (Reference: Page 3 of "warehouserobotsproject.pdf")                 */


/* Charging Station Automaton */

plant charging_station:
    uncontrollable u_full_battery;
    controllable c_accept_pickup_request;
    disc bool battery_full = false;
    disc bool message_accepted = false;
    location l0:
        initial; marked;
        edge c_accept_pickup_request when battery_full = true do message_accepted := true;
        edge u_full_battery do battery_full:= true;
end

/* Driving state Automaton */

plant driving:
    controllable c_move;
    controllable c_rotate90;
    controllable c_stop;
    uncontrollable u_arrive_to_order; //It is assumed that this signal implies a handshake between the pickup request and camera information (or other sensor data) to match the package that the robot should pick
    disc bool moving = false;
    disc bool reached = false; //reached storage location or pickup location
    location l0:
        initial; marked;
        edge c_move do moving := true, reached:= false;
        edge c_rotate90 goto l0;
        edge c_stop do moving := false;
        edge u_arrive_to_order do moving := false, reached:= true;
end

/* Destination Automaton. Note: This Automaton reflects both the storage and pickup location. */
/* The c_get_pickup_request and c_drop_at_pickup edges are used to represent this two situations.                   */

plant destination:
    controllable c_get_pickup_request;  //pickup at storage to take to pickup location
    controllable c_drop_at_pickup;
    disc bool picked = false;
    location l0:
        initial; marked;
        edge c_get_pickup_request do picked := true;
        edge c_drop_at_pickup   do picked := false;
end



/* REQUIREMENTS SECTION                                                                                 */
/* All requirements below are expressed as invariant requirements. It could also be possible for        */
/* Note: It is also possible to express requirements via requirement Automaton(s) to be defined.        */




// Safe Movement (Requirements start with letter M)


/* M1 REQUIREMENT: Special actions, like rotating, may only be performed when the vehicle is at a grid point as indicated by the location bar-codes.*/
/*@Sukrut: What other special actions do we need to restrict? */
/* INFORMAL STATEMENT: To prevent collisions and hardware integrity, a 90 degree rotation shall only be performed when the robot is not moving and a pickup request is in place.*/

requirement invariant driving.c_rotate90 needs driving.moving = false and charging_station.message_accepted = true;


/* M2 REQUIREMENT: The vehicle may not move when it is raising or lowering its lifting mechanism. */
/*@Sukrut: Do we need to add something related to lifting? */
/* INFORMAL STATEMENT: Upon reaching a storage location, the robot has to pickup the order before proceeding to delivery */
requirement invariant driving.reached = true and destination.picked = false disables driving.c_move;
requirement invariant driving.reached = true and destination.picked = false disables driving.c_rotate90;
requirement invariant driving.reached = true and destination.picked = false disables driving.c_stop;

/* M3 REQUIREMENT: The vehicle may not collide with other vehicles.  */
/*@Sukrut: Current statement does not completely cover the requirement M3 */
/* INFORMAL STATEMENT (non-functional): In order to break, the robot shall be moving.*/
requirement invariant driving.c_stop needs driving.moving = true;

/* M7 REQUIREMENT: After the battery is being recharged, the vehicle may only start moving again when the battery is fully charged.  */
/* INFORMSL STATEMENT: In order to accept a command (within the charging station), battery shall be full */
/* INFORMAL STATEMENT: In order to move, robot shall have full battery and a pickup request command accepted*/

requirement invariant charging_station.c_accept_pickup_request needs charging_station.battery_full = true;
requirement invariant driving.c_move needs charging_station.battery_full = true and charging_station.message_accepted = true;







// Path planning and execution (Requirements start with letter p)









// Location requests (Requirements start with letter L)

/* L3 REQUIREMENT: A new destination may only be requested when it has reached its previous destination.  */
/* INFORMAL STATEMENT: When a command message issuing a pickup request has been accepted, no other pickup request can be accepted until the current one is complete */
/* INFORMAL STATEMENT: When the robot is driving, no pickup request command shall be processed*/
/* INFORMAL STATEMENT (non-functional): When the robot is on the move, no further "move" commands shall be issued  */
/* INFORMAL STATEMENT (non-functional): A robot cannot pickup an order while moving   */
/* INFORMAL STATEMENT (non-functional): A robot cannot pickup an order while moving   */
/* INFORMAL STATEMENT: In order to pickup an order (rack), the robot must have reached its destination. */
/* INFORMAL STATEMENT (non-functional): To drop a package, the robots shall have reached its destination and cargo shall have been picked up first. */

requirement invariant charging_station.message_accepted disables charging_station.c_accept_pickup_request;
requirement invariant driving.moving = true disables charging_station.c_accept_pickup_request;
requirement invariant driving.moving = true disables driving.c_move;
requirement invariant driving.moving = true disables destination.c_get_pickup_request;
requirement invariant destination.picked = true disables destination.c_get_pickup_request;
requirement invariant destination.c_get_pickup_request needs driving.reached = true;
requirement invariant destination.c_drop_at_pickup needs destination.picked = true and driving.reached = true;



