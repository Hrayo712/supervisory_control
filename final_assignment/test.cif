

/* @HIRAM (05_12_2019): This is only a baseline and several changes are necessary, such as, verifying every single requirement and
 making sure consistent wording is kept. Feel free to modify or rename words/variables/edges/states as you see fit.

  @Sukrut(05_12_2019): Added the requirement numbers from the original text (Page 3) to keep track of the requirements,
  I have also divided the requirements based on intention as mentioned in the text. I have kept all the informal statements written by @Hiram,
  they relate to requirement statements in the same order. A PDF of the original text is shared where I have marked already implemented requirements.
  Please refer and update both the files! (Reference: Page 3 of "warehouserobotsproject.pdf")

  @Sukrut(05_12_2019): Added Critical/ empty states for the battery  and Added variable Charging in "plant charging_station" - Requirement L5

  @HIRAM (12_12_2019) : Completed the uncontrollable "charging" model. Modified the Driving and destination plant to better reflect the uncontrollable plant.
             Made modifications to support M4/M5/L5 requirements. */

/* Robot group */

group def robot():
    plant charging:
        uncontrollable u_full_battery;
        uncontrollable u_empty_battery;
        uncontrollable u_charging;
        uncontrollable u_low_battery;

        disc bool battery_full = true;
        disc bool critical_battery=false;
        disc bool charging = false;
        disc bool low_battery = false;

        location l0:
            initial; marked;
            edge u_full_battery   when (battery_full = false and (low_battery = true and charging = true))   do battery_full:= true, charging:= false, critical_battery:=false, low_battery := false;
            edge u_low_battery    when ((low_battery = false and battery_full = true) or (charging = true and critical_battery = true )) do low_battery := true, battery_full := false, critical_battery:=false;
            edge u_empty_battery  when (critical_battery = false and low_battery = true and charging = false) do critical_battery:= true, low_battery := false;
            edge u_charging       when ((charging = false))                              do charging:=true ;
    end

    plant idle:
        controllable c_complete_request;
        controllable c_accept_msg_request;
        controllable c_request_human_assistance;

        uncontrollable u_message_request;

        disc bool request_assistance=false;
        disc bool message_accepted = false;
        disc bool message_pending = false;
        disc bool request_completed = false;

        location l0:
            initial; marked;
            edge u_message_request                                      do message_pending := true;
            edge c_request_human_assistance  /* when request_assistance = false*/ do request_assistance:=true;
            edge c_accept_msg_request     when message_pending  = true  do message_accepted := true, message_pending:= false,request_assistance:=false, request_completed:= false;
            edge c_complete_request       when message_accepted = true and request_completed = false do message_accepted := false, request_completed:= true, request_assistance:=false;

    end

    /* Driving state Automaton */
    enum Location = STORAGE, PICKUP, CHARGING, READY;

    plant driving:
        controllable c_move;
        controllable c_rotate; // Rotate is assumed to be 90 degrees. HW  limitation.
        controllable c_stop;
        controllable c_goto_charge;
        controllable c_ready;
        controllable c_wait;
        uncontrollable u_no_collision;
        uncontrollable u_collision_detected;

        uncontrollable u_arrive_to_storage;//It is assumed that this signal implies a handshake between the pickup request and camera information (or other sensor data) to match the package that the robot should pick
        uncontrollable u_arrive_to_pickup;
        uncontrollable u_arrive_to_charge;

        disc bool collision = false;
        disc bool moving = false;
        disc bool wait =false;
        disc Location loc = READY;
        disc bool goto_charge_req = false;
        location l0:

            initial; marked;
            edge c_rotate               goto l0;
            edge c_wait                 do wait:= true;
            edge c_ready                when (charging.battery_full = true and loc = CHARGING) do loc := READY;
            edge c_move                 do moving := true, wait:=false;
            edge c_stop                 do moving := false;
            edge c_goto_charge          do moving := true, goto_charge_req := true;
            edge u_collision_detected   when collision = false  do collision :=true, moving:=false;
            edge u_no_collision         when collision = true   do collision:= false;
            edge u_arrive_to_storage    when idle.message_accepted = true and moving = true and destination.picked = false do moving := false, loc:= STORAGE;
            edge u_arrive_to_pickup     when idle.message_accepted = true and moving = true and destination.picked = true  do moving := false, loc:= PICKUP;
            edge u_arrive_to_charge     when idle.message_accepted = false and goto_charge_req = true do moving := false, loc:= CHARGING, goto_charge_req := false;
    end


    /* Destination Automaton. Note: This Automaton reflects both the storage and pickup location. */
    /* The c_get_pickup_request and c_drop_at_pickup edges are used to represent this two situations.                   */

    plant destination:

        controllable c_get_pickup_request;  //pickup at storage to take to pickup location.
        controllable c_drop_at_pickup;
        controllable c_validate_pickup;
        controllable c_validate_drop;

        uncontrollable u_confirmation;
        uncontrollable u_rack_collision;
        uncontrollable u_rack_no_collision;

        disc bool validate_pickup = false;
        disc bool validate_drop = false;
        disc bool dropped = false;
        disc bool collision = false;
        disc bool picked = false;
        disc bool confirmation = false;

        location l0:
            initial; marked;
            edge c_get_pickup_request  when (validate_pickup = true   and confirmation = true)  do picked := true,  validate_pickup := false , confirmation := false; //it is assumed that collision can be measured before starting the pickup procedure (lifting process)
            edge c_drop_at_pickup      when (validate_drop   = true   and confirmation = true)  do picked := false, validate_drop := false, confirmation := false, dropped := true;
            edge c_validate_pickup     when driving.loc = STORAGE do validate_pickup := true,dropped := false;
            edge c_validate_drop       when driving.loc = PICKUP  do validate_drop:= true;
            edge u_rack_collision      when collision = false do collision := true;
            edge u_rack_no_collision   when collision = true do collision := false;
            edge u_confirmation        when (validate_pickup = true or validate_drop = true) do confirmation := true; //confirmation for both validations
    end
end

robot_one: robot();

/* M1 REQUIREMENT: Special Actions, like rotating, may only be performed when the vehicle is at a grid point as indicated by the location bar-codes */
/* Note: This requirement is abstracted by the model*/

/* M2 REQUIREMENT: The vehicle may not move when it is raising or lowering its lifting mechanism. */

requirement invariant robot_one.driving.loc = robot_one.STORAGE and robot_one.destination.picked = false disables robot_one.driving.c_move;
requirement invariant robot_one.driving.loc = robot_one.STORAGE and robot_one.destination.picked = false disables robot_one.driving.c_rotate;

requirement invariant robot_one.driving.loc = robot_one.PICKUP and robot_one.destination.picked = true disables robot_one.driving.c_move;
requirement invariant robot_one.driving.loc = robot_one.PICKUP and robot_one.destination.picked = true disables robot_one.driving.c_rotate;

/* M3 REQUIREMENT: The vehicle may not collide with other vehicles.  */
requirement invariant robot_one.driving.c_stop needs robot_one.driving.moving = true;
requirement invariant robot_one.driving.c_rotate needs robot_one.driving.moving = false and robot_one.idle.message_accepted = true;
requirement invariant robot_one.destination.collision disables robot_one.driving.c_move;
requirement invariant robot_one.destination.collision disables robot_one.driving.c_rotate;

/* M4 REQUIREMENT: If a product rack is lifted, it may not collide with other product racks.  */
requirement invariant robot_one.destination.c_get_pickup_request needs robot_one.destination.confirmation = true and robot_one.destination.picked = false and robot_one.destination.dropped = false;
requirement invariant robot_one.destination.c_validate_pickup needs robot_one.driving.loc = robot_one.STORAGE and robot_one.idle.message_accepted = true;
requirement invariant robot_one.destination.confirmation = true disables robot_one.destination.c_validate_pickup;
requirement invariant robot_one.destination.picked = true disables robot_one.destination.c_validate_pickup;

requirement invariant robot_one.destination.confirmation = true disables robot_one.destination.c_validate_drop;
requirement invariant robot_one.destination.c_validate_drop needs robot_one.driving.loc = robot_one.PICKUP and robot_one.destination.picked = true and robot_one.idle.message_accepted = true;
requirement invariant robot_one.destination.c_drop_at_pickup needs robot_one.driving.loc = robot_one.PICKUP and robot_one.destination.picked = true and robot_one.destination.confirmation = true;



/* M4/M5 REQUIREMENT: When the proximity sensors are activated , the vehicle should stop immediately */
requirement invariant robot_one.driving.c_move needs robot_one.driving.collision = false;
requirement invariant robot_one.driving.collision disables robot_one.driving.c_move;
requirement invariant robot_one.driving.collision disables robot_one.driving.c_rotate;

/* M6 REQUIREMENT: When the battery is critically low, the vehicle should stop moving and wait for human assistance.*/

requirement invariant robot_one.charging.critical_battery = true disables robot_one.idle.c_accept_msg_request;
requirement invariant robot_one.charging.critical_battery = true disables robot_one.driving.c_move;
requirement invariant robot_one.charging.critical_battery = true disables robot_one.driving.c_rotate;
requirement invariant robot_one.idle.c_request_human_assistance needs (robot_one.charging.critical_battery = true and robot_one.charging.charging = false) or (robot_one.driving.wait = true and robot_one.driving.collision = true);

/* M7 REQUIREMENT: After the battery is being recharged, the vehicle may only start moving again when the battery is fully charged.  */

requirement invariant robot_one.idle.c_accept_msg_request needs robot_one.charging.battery_full = true and robot_one.charging.low_battery = false;
requirement invariant robot_one.driving.c_move needs (robot_one.charging.battery_full = true and robot_one.idle.message_accepted = true) or (robot_one.charging.low_battery = true and robot_one.driving.goto_charge_req = true);
requirement invariant robot_one.driving.c_goto_charge needs robot_one.charging.low_battery = true and robot_one.driving.moving = false and robot_one.driving.goto_charge_req = false;
requirement invariant robot_one.charging.low_battery = true disables robot_one.destination.c_validate_pickup;
requirement invariant robot_one.charging.low_battery = true disables robot_one.destination.c_validate_drop;
requirement invariant robot_one.driving.loc = robot_one.CHARGING disables robot_one.driving.c_move;
requirement invariant robot_one.driving.loc = robot_one.CHARGING disables robot_one.driving.c_rotate;
requirement invariant robot_one.driving.loc = robot_one.CHARGING disables robot_one.driving.c_goto_charge;


/* Path planning and execution (Requirements start with letter P) */


/* Location requests (Requirements start with letter L) */

/* L3 REQUIREMENT: A new destination may only be requested when it has reached its previous destination.  */

requirement invariant robot_one.idle.message_accepted disables robot_one.idle.c_accept_msg_request;
requirement invariant robot_one.driving.moving = true disables robot_one.idle.c_accept_msg_request;
requirement invariant robot_one.driving.moving = true disables robot_one.driving.c_move;
requirement invariant robot_one.driving.moving = true disables robot_one.destination.c_get_pickup_request;
requirement invariant robot_one.destination.picked = true disables robot_one.destination.c_get_pickup_request;
requirement invariant robot_one.destination.c_get_pickup_request needs robot_one.driving.loc = robot_one.STORAGE and robot_one.destination.collision = false;
requirement invariant robot_one.destination.c_drop_at_pickup needs robot_one.destination.picked = true and robot_one.driving.loc = robot_one.PICKUP and robot_one.destination.collision = false;

/* L4 REQUIREMENTL: The vehicle should wait with performing other actions until a new destination is received */
/* This is captured by the model */

/* L5 REQUIREMENT: A battery location may only be requested when the battery is low.  */

requirement invariant robot_one.driving.c_wait needs robot_one.driving.collision = true;
requirement invariant robot_one.driving.wait = true disables robot_one.driving.c_wait;
requirement invariant robot_one.idle.c_request_human_assistance needs robot_one.driving.moving = false;
requirement invariant robot_one.idle.c_complete_request needs robot_one.driving.moving = false and robot_one.destination.dropped = true and robot_one.driving.loc = robot_one.PICKUP;

