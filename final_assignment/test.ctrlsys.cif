plant automaton charging_station:
  uncontrollable u_full_battery;
  controllable c_accept_pickup_request;
  disc bool battery_full = false;
  disc bool message_accepted = false;
  location l0:
    initial;
    marked;
    edge c_accept_pickup_request when battery_full = true do message_accepted := true;
    edge u_full_battery do battery_full := true;
end
plant automaton driving:
  controllable c_move;
  controllable c_rotate90;
  controllable c_stop;
  uncontrollable u_arrive_to_order;
  disc bool moving = false;
  disc bool reached = false;
  location l0:
    initial;
    marked;
    edge c_move do moving := true, reached := false;
    edge c_rotate90 goto l0;
    edge c_stop do moving := false;
    edge u_arrive_to_order do moving := false, reached := true;
end
plant automaton destination:
  controllable c_get_pickup_request;
  controllable c_drop_at_pickup;
  uncontrollable u_rack_collision;
  uncontrollable u_rack_no_collision;
  disc bool collision = false;
  disc bool picked = false;
  location l0:
    initial;
    marked;
    edge c_get_pickup_request do picked := true;
    edge c_drop_at_pickup do picked := false;
    edge u_rack_collision do collision := true;
    edge u_rack_no_collision do collision := false;
end
supervisor automaton sup:
  alphabet charging_station.c_accept_pickup_request, driving.c_move, driving.c_rotate90, driving.c_stop, destination.c_get_pickup_request, destination.c_drop_at_pickup;
  location:
    initial;
    marked;
    edge charging_station.c_accept_pickup_request when true;
    edge destination.c_drop_at_pickup when true;
    edge destination.c_get_pickup_request when true;
    edge driving.c_move when true;
    edge driving.c_rotate90 when true;
    edge driving.c_stop when true;
end
requirement invariant driving.c_rotate90 needs driving.moving = false and charging_station.message_accepted = true;
requirement invariant driving.reached = true and destination.picked = false disables driving.c_move;
requirement invariant driving.reached = true and destination.picked = false disables driving.c_rotate90;
requirement invariant driving.reached = true and destination.picked = false disables driving.c_stop;
requirement invariant driving.c_stop needs driving.moving = true;
requirement invariant charging_station.c_accept_pickup_request needs charging_station.battery_full = true;
requirement invariant driving.c_move needs charging_station.battery_full = true and charging_station.message_accepted = true;
requirement invariant charging_station.message_accepted disables charging_station.c_accept_pickup_request;
requirement invariant driving.moving = true disables charging_station.c_accept_pickup_request;
requirement invariant driving.moving = true disables driving.c_move;
requirement invariant driving.moving = true disables destination.c_get_pickup_request;
requirement invariant destination.picked = true disables destination.c_get_pickup_request;
requirement invariant destination.c_get_pickup_request needs driving.reached = true and destination.collision = false;
requirement invariant destination.c_drop_at_pickup needs destination.picked = true and driving.reached = true;
